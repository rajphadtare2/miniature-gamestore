services:
  ## Sql Docker Compose Config
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: rajp
      POSTGRES_PASSWORD: rajp
    volumes:
      - ./postgres-order:/var/lib/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5432"
    restart: always
    networks:
      - app-network

  postgres-game:
    container_name: postgres-game
    image: postgres
    environment:
      POSTGRES_DB: game-service
      POSTGRES_USER: rajp
      POSTGRES_PASSWORD: rajp
    volumes:
      - ./postgres-game:/var/lib/data/postgres
    expose:
      - "5432"
    ports:
      - "5432:5432"
    restart: always
    networks:
      - app-network

  postgres-user:
    container_name: postgres-user
    image: postgres
    environment:
      POSTGRES_DB: user-service
      POSTGRES_USER: rajp
      POSTGRES_PASSWORD: rajp
    volumes:
      - ./postgres-user:/var/lib/data/postgres
    expose:
      - "5433"
    ports:
      - "5433:5432"
    restart: always
    networks:
      - app-network

  ## Game-Service Docker Compose Config
  game-service:
    container_name: game-service
    build:  # Set the context to the parent module
      context: ./game-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
      - "5003:5003"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-game:5432/game-service
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5003
    depends_on:
      - postgres-game
      - discovery-service
      - api-gateway
    restart: always
    networks:
      - app-network

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    build:  # Set the context to the parent module
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "5000:5000"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5432/order-service
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5000
    depends_on:
      - postgres-order
      - discovery-service
      - api-gateway
    restart: always
    networks:
      - app-network

  ## User-Service Docker Compose Config
  user-service:
    container_name: user-service
    build:  # Set the context to the parent module
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
      - "5001:5001"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5432/user-service
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5001
    depends_on:
      - postgres-user
      - discovery-service
      - api-gateway
    restart: always
    networks:
      - app-network

  ## message-Service Docker Compose Config
  message-service:
    container_name: message-service
    build:
      context: ./message-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
      - "5002:5002"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5002
    restart: always
    depends_on:
      - discovery-service
      - api-gateway
    networks:
      - app-network

  ## api-gateway Docker Compose Config
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
      - "5005:5005"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    restart: always
    depends_on:
      - discovery-service
    networks:
      - app-network

  discovery-service:
    container_name: discovery-service
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
      - "5006:5006"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006
    restart: always
    networks:
      - app-network

  #kafka configuration
  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"   # External access (Spring Boot client)
      - "29092:29092"  # Internal Docker access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - app-network

  kafka-cli:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka-cli
    depends_on:
      - broker
    entrypoint: ["sleep", "infinity"]
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8084:8084"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:29092
    depends_on:
      - broker
    networks:
      - app-network

  frontend:
    build:
      context: ./game-store-ui
    ports:
      - "4200:80"
    depends_on:
      - game-service
      - user-service
      - order-service
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    command: start-dev
    environment:
      KC_DB: dev-file
      KC_HTTP_PORT: 8087
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_IMPORT: /opt/keycloak/data/realm-export.json
    ports:
      - "8087:8087"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak/realm-export.json:/opt/keycloak/data/realm-export.json
    networks:
      - app-network

volumes:
  keycloak_data:

networks:
  app-network:
    driver: bridge